# DevPod -> Provider (Kubernetes) -> Advanced Options -> Pod Manifest Template

apiVersion: v1
kind: Pod
metadata:
  name: pod-template
spec:
  containers:
    # Do not change this name. It must be "devpod" to change the devpod container.
    - name: devpod
      # image will be defined in devcontainer.json. So changing it here is useless.
      # args will not work.
      # command will not work.
      # environment will not work. You should set environment variables in Dockerfile or devcontainer.json.
      resources:
        requests:
          cpu: "8"
          memory: "32Gi"
          # nvidia.com/gpu: "8" # Uncomment if GPU is needed.
          ephemeral-storage: "100Gi" # Avoid filling node disk.
        limits:
          cpu: "64"
          memory: "256Gi"
          # nvidia.com/gpu: "8" # Uncomment if GPU is needed.
          ephemeral-storage: "100Gi" # Avoid filling node disk.
      volumeMounts:
        # Host root mount for accessing host files if needed.
        - mountPath: /host
          name: host
          readOnly: true # Avoid accidental changes to host. Set to false if you need write access.
        - mountPath: /certs
          name: docker-certs
          readOnly: true
    # Docker daemon sidecar so that Docker-in-Docker works.
    - name: docker
      image: docker:28.3.3-dind-alpine3.22
      env:
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        - --storage-driver=overlay2
      securityContext:
        privileged: true
        runAsUser: 0
        runAsGroup: 0
      resources:
        requests:
          cpu: "1"
          memory: "2Gi"
          ephemeral-storage: "100Gi"
          # You don't need to add nvidia.com/gpu here, even if you need GPU in devpod container.
          # You can still access NVIDIA GPU. The requests are just for scheduling, and it's already requested in devpod container.
        limits:
          cpu: "8"
          memory: "16Gi"
          ephemeral-storage: "100Gi" # Avoid filling node disk.
      volumeMounts:
        - mountPath: /certs
          name: docker-certs
          readOnly: false
  volumes:
    # Mount the host's root directory to /host in the pod.
    # This is useful if you want to access files on the host.
    # Be cautious with this as it can pose security risks.
    - name: host
      hostPath:
        path: /
        type: Directory # Make sure it exists.
    # Docker client certs volume for Docker-in-Docker.
    - name: docker-certs
      emptyDir:
        medium: Memory
        sizeLimit: 16Mi
